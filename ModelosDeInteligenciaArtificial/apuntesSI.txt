(loop-for-count(?i 0 10) do (printout t(i) crlf)



 (defrule multiplicacion(numero ?x) => (loop-for-count(?i 0 10) do (* ?i ?x)))
 

CLIPS> (printout t(+ 2 3) crlf)
5

Printea 2+3

CLIPS> (defrule iterar-numero =>(loop-for-count(?i 0 10) do (printout t ?i crlf)))
CLIPS> (run)
0
1
2
3
4
5
6
7
8
9
10

devuelve mediante funcion y bucle numero del 0-10

CLIPS> (assert (numero 5))
<Fact-1>
CLIPS> (defrule mostrar-numero (numero ?x) => (printout t"El numero es "?x crlf))
CLIPS> (run)
El numero es 5

Mediante un funcion y el assert dado, devuelve un print con el numero/assert que es


CLIPS> (bind ?x (read))

Lee un numero

CLIPS> (reset)

Para reiniciar (mejor cerrar y volver a abrir)

CLIPS> (assert (numero 6))
<Fact-2>
CLIPS> (defrule multiplicacion(numero ?x) => (loop-for-count(?i 0 10) do (printout t(* ?i ?x) crlf)))
CLIPS> (run)
0
6
12
18
24
30
36
42
48
54
60

devuelve mediante el assert la tabla de multiplicar



CLIPS> (defrule multiplicacion(numero ?x) => (loop-for-count(?i 0 10) do (printout t ?i "*" ?x "=" (* ?i ?x) crlf)))
CLIPS> (run)
0*6=0
1*6=6
2*6=12
3*6=18
4*6=24
5*6=30
6*6=36
7*6=42
8*6=48
9*6=54
10*6=60
 
lo mismo pero mejorado





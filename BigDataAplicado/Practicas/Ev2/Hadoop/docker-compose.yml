services:
  # --------------------------------- MYSQL ---------------------------------
  mysql:
    container_name: mysql # Nombre del contenedor
    hostname: mysql # Nombre del host
    image: mysql:latest # Imagen de MySQL
    environment:
      MYSQL_ROOT_PASSWORD: root # Contraseña del usuario root
      MYSQL_DATABASE: hadoop # Nombre de la base de datos
      #MYSQL_USER: user # Nombre del usuario
      #MYSQL_PASSWORD: password # Contraseña del usuario
    ports:
      - "3306:3306" # Puerto de MySQL
    volumes:
      - hadoop_mysql:/var/lib/mysql # Volumen de MySQL
      - ./mysql/:/docker-entrypoint-initdb.d # Montar el directorio con los scripts SQL
    networks:
      hadoop_network:
        aliases:
          - mysql # Alias de MySQL

  # --------------------------------- NEO4J ---------------------------------
  neo4j:
    image: neo4j:latest
    container_name: neo4j
    hostname: neo4j
    environment:
      - NEO4J_AUTH=neo4j/my-secret-pw # Configuración de autenticación
    ports:
      - "7474:7474" # Web UI
      - "7687:7687" # Bolt protocol
    volumes:
      - neo4j_data:/data # Volumen para datos persistentes
      - neo4j_logs:/logs # Volumen para logs
      - ./neo4j:/var/lib/neo4j/import # Montar el directorio con los scripts SQL
    networks:
      hadoop_network:
        aliases:
          - neo4j

  # --------------------------------- MONGODB ---------------------------------
  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin # Usuario administrador
      MONGO_INITDB_ROOT_PASSWORD: secret # Contraseña del usuario
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db # Volumen para datos persistentes
      - ./mongodb/:/docker-entrypoint-initdb.d # Montar el directorio con los scripts SQL
    networks:
      hadoop_network:
        aliases:
          - mongodb

  # --------------------------------- HADOOP ---------------------------------
  namenode:
    build: ./Namenode
    container_name: namenode
    hostname: namenode
    environment:
      - CLUSTER_NAME=test
    ports:
      - "9870:9870" # Web UI
      - "8020:8020" # IPC
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - ./data:/hadoop-data/input
      - ./map_reduce:/hadoop-data/map_reduce
    networks:
      hadoop_network:
        aliases:
          - namenode

  # namenode2:
  #   build: ./Namenode
  #   container_name: namenode2
  #   hostname: namenode
  #   environment:
  #     - CLUSTER_NAME=test
  #   ports:
  #     - "9871:9870" # Web UI para el segundo NameNode
  #     - "8021:8020" # IPC para el segundo NameNode
  #   volumes:
  #     - hadoop_namenode2:/hadoop/dfs/name
  #     - ./data:/hadoop-data/input
  #     - ./map_reduce:/hadoop-data/map_reduce
  #   networks:
  #     hadoop_network:
  #       aliases:
  #         - namenode2

  resourcemanager:
    build: ./Resourcemanager
    container_name: resourcemanager
    hostname: resourcemanager
    depends_on:
      - namenode
    ports:
      - "8088:8088" # ResourceManager Web UI
    networks:
      hadoop_network:
        aliases:
          - resourcemanager

  # resourcemanager2:
  #   build: ./Resourcemanager
  #   container_name: resourcemanager2
  #   hostname: resourcemanager2
  #   depends_on:
  #     - namenode
  #   ports:
  #     - "8089:8088" # ResourceManager Web UI
  #   networks:
  #     hadoop_network:
  #       aliases:
  #         - resourcemanager2

  nodemanager:
    build: ./Nodemanager
    container_name: nodemanager
    hostname: nodemanager
    depends_on:
      - resourcemanager
      - datanode
    ports:
      - "8043:8043" # NodeManager Web UI
    networks:
      hadoop_network:
        aliases:
          - nodemanager

  # nodemanager2:
  #   build: ./Nodemanager
  #   container_name: nodemanager2
  #   hostname: nodemanager
  #   depends_on:
  #     - resourcemanager
  #     - datanode
  #   ports:
  #     - "8044:8043" # NodeManager Web UI
  #   networks:
  #     hadoop_network:
  #       aliases:
  #         - nodemanager2

  datanode:
    build: ./Datanode
    container_name: datanode
    hostname: datanode
    depends_on:
      - namenode
    ports:
      - "9864:9864" # DataNode Web UI
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    networks:
      hadoop_network:
        aliases:
          - datanode

  # datanode2:
  #   build: ./Datanode
  #   container_name: datanode2
  #   hostname: datanode2
  #   depends_on:
  #     - namenode
  #   ports:
  #     - "9865:9864" # DataNode Web UI
  #   volumes:
  #     - hadoop_datanode2:/hadoop/dfs/data
  #   networks:
  #     hadoop_network:
  #       aliases:
  #         - datanode2

  # datanode3:
  #   build: ./Datanode
  #   container_name: datanode3
  #   hostname: datanode3
  #   depends_on:
  #     - namenode
  #   ports:
  #     - "9866:9864" # DataNode Web UI
  #   volumes:
  #     - hadoop_datanode3:/hadoop/dfs/data
  #   networks:
  #     hadoop_network:
  #       aliases:
  #         - datanode3

  # datanode4:
  #   build: ./Datanode
  #   container_name: datanode4
  #   hostname: datanode4
  #   depends_on:
  #     - namenode
  #   ports:
  #     - "9867:9864" # DataNode Web UI
  #   volumes:
  #     - hadoop_datanode4:/hadoop/dfs/data
  #   networks:
  #     hadoop_network:
  #       aliases:
  #         - datanode4

  # datanode5:
  #   build: ./Datanode
  #   container_name: datanode5
  #   hostname: datanode5
  #   depends_on:
  #     - namenode
  #   ports:
  #     - "9868:9864" # DataNode Web UI
  #   volumes:
  #     - hadoop_datanode5:/hadoop/dfs/data
  #   networks:
  #     hadoop_network:
  #       aliases:
  #         - datanode5

# --------------------------------- VOLUMENES ---------------------------------

volumes:
  hadoop_namenode:
  # hadoop_namenode2:
  hadoop_datanode:
  # hadoop_datanode2:
  # hadoop_datanode3:
  # hadoop_datanode4:
  # hadoop_datanode5:
  hadoop_mysql: # Volumen de MySQL
  neo4j_data: # Volumen de datos para Neo4j
  neo4j_logs: # Volumen de logs para Neo4j
  mongodb_data: # Volumen de datos para MongoDB

networks:
  hadoop_network:
    name: hadoop_network

docker run -d --network some-network --name some-mongo \
	-e MONGO_INITDB_ROOT_USERNAME=mongoadmin \
	-e MONGO_INITDB_ROOT_PASSWORD=secret \
	mongo


VARIABLES DE ENTORNO USERNAME Y PASSWORD

Para verlas las podemos ver desde docker
--------------

Creamos el volumen como con docker.



PARA LANZAR UN CONTAINER MONGO:
docker run --name MongoContainerBDA -v Mongo_Volumen:/data/db -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret -d mongo 

docker ps - para ver el id

docker exec -it MongoContainerBDA bin/bash

Escribimos mongosh para entrar (o mongosh -u mongoadmin -p secret --authenticationDatabase admin)

CREAR BASE DE DATOS: use Instituto

Si existe te cambia de BD 


Para crear coleccion Clase (tabla)

db.createCollection("Clase")

db.COLECCTION_NAME.find() - para ver informacion dentor de la tabla (Importante ID's)

db.COLLECTION_NAME.drop() - PARA ELIMINAR UNA COLECCION

Esto para insertar 1 solo

db.Clase.insertOne({Nombre:"C09", Alumnos: [{Nombre:"pepe",Suspendido: "si"}]})   - para crear cosas
db.Clase.insertOne({Nombre:"C02", Alumnos: [{Nombre:"jose",Suspendido: "si"},{Nombre: 'Jorge',rubio:true}]})

Esto para insertar varios

db.products.insertMany( [
      { _id: 10, item: "large box", qty: 20 },
      { _id: 11, item: "small box", qty: 55 },
      { _id: 12, item: "medium box", qty: 30 }
])


show collections/tables -> Para ver las tablas

Find para leer
Update para 


db.Clase.find({}) -> Para ver el contenido de la tabla Clase

db.Clase.find({Nombre:'C02'}) -> para buscar cuyo nombre sea C02

db.Clase.find({Nombre:{$regex:"C"}}) -> para buscar mas fino, que contenga una C

db.Clase.find({edad:{$gt:30}}) -> encuentra los mayores a 30

db.products.find({item:{$in:["medium box","small box"]}}) -> para buscar los productos que tengan los valores que hay entre corchetes

db.products.find({item:{$ne:"medium box"}}) -> que no tenga el valor mediumbox, es como el where negandolo

db.products.find({item:{$ne:"medium box"}},{item:1}) -> el item 1 es el select

db.students.updateOne({name: "Alice"}, {novio: rafa}) -> para añadir uno

db.students.updateOne({name: "Alice"}, {set:{age:23}}); -> Actualiza el primero que encuentre con age23. Si no tiene la propiedad (age) la crea

Para updatear varios es con updateMany

db.students.deleteOne({name: "Alice"}) -> borra el primero que encuentre con name Alice

db.students.find({"Info.fecha": "mañana"}) -> para filtrar por info.fecha (entrar dentro de un {})


El match es como un find, pero los agreggation se van añadiendo uno detras de otro

$lookup -> para hacer joins

$unwind -> será la consulta dificil. lo que hace es dividir el array en elementos
Es para buscar un elemento dentro de un array

unwind property deporte
Ejemplo:
[{
	nombre:"Pepe"
	deporte: ["Futbol","tenis"]
},
{
	nombre:"Jose"
	deporte: ["Pingpong","Surf"]
}]


pasaria a:

[{
	nombre:"Pepe"
	deporte: "Futbol"
},
{
	nombre:"Pepe"
	deporte: "tenis"
},
{
	nombre:"Jose"
	deporte: "Pingpong"
},
{
	nombre:"Jose"
	deporte: "Surf"
}]

lookup - para hacer joins en mongo

Sintaxis.

Junta orders con inventory, los 2 siguientes campos son las keyA=keyB 

https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/
db.orders.aggregate( [
   {
     $lookup:
       {
         from: "inventory",
         localField: "item",
         foreignField: "sku",
         as: "inventory_docs"
       }
  }
] )


El unwind solo se hace sobre los arrays

db.inventory.aggregate( [ { $unwind : "$sizes" } ] )

Lo que hace es que se repite la informacion, se hace sobre el lookup anterior.

group, match, project investigar y añadir (addFields)

